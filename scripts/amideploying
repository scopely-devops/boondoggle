#!/usr/bin/env python
"""A script for managing autoscaling groups

Usage:
  amideploying [options] launch <ami> [--role=<role>] 
  amideploying [options] terminate <ami>
  amideploying [options] terminate-others <ami> [--role=<role>]
  amideploying [options] roles


Commands:
  launch    - Creates a launch configuration and autoscaling group for the AMI and attaches it to the ELB
  terminate - Terminates the launch configuration and autoscaling group created for the AMI (assuming they were created
              using our standard naming.
  roles     - Lists available roles

Options:
  -h --help                           Show this screen.
  -c --configuration=<configuration>
  --version                           Show version.
"""

from docopt import docopt
from yaml import load
from amideploying.managers import DeployManager
from amideploying import __version__, __filename__
import sys

if __name__ == '__main__':
    args = docopt(__doc__, version='Am I Deploying? {0}'.format(__version__))

    if args['--configuration'] is not None:
        config_path = args['--configuration']
    else:
        config_path = '{0}.yml'.format(__filename__)

    with open(config_path, 'r') as fh:
        config = load(fh)

    if args['roles']:
        for r in config['roles'].keys():
            print r
        sys.exit(0)

    role = args['--role'] or config.get('default_role')
    assert role is not None, \
        "Either --role option, or default_role should be present"

    manager = DeployManager(profile="preview",
                            ami=args.get("<ami>"),
                            config=config.get('roles')[role],
                            alarms=config.get('alarms'),
                            role=role)
    if args['launch']:
        manager.start_ag()
    if args['terminate']:
        manager.shutdown_ag_by_ami(args.get("<ami>"))
    if args['terminate-others']:
        manager.shutdown_other_ags()