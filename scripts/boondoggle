#!/usr/bin/env python
# Copyright 2014 Scopely, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A script for managing stacks using Cloudformation templates

Usage:
  boondoggle [options] ensure <name> --url <url> [<parameters>]...
  boondoggle [options] cancel-update <name>
  boondoggle [options] status <name>

Commands:
  ensure                    Updates the stack with the given name to use the specified template, hosted on S3. This creates the
                            stack if necessary.
  cancel-update             Cancels an in-progress update on the specified stack.
  status                    Returns the current status of the specified stack.

Options:
  -p --profile=<profile>    Use the specified profile in your .boto
  -r --region=<region>      Use the specified region [default: us-east-1]
  -h --help                 Show this screen.
  -v --version              Show version.
"""

from docopt import docopt

from boondoggle.managers import DeployManager
from boondoggle import __version__


if __name__ == '__main__':
    args = docopt(__doc__, version='Am I Deploying? {0}'.format(__version__))
    manager = DeployManager(region=args.get("--region"), profile=args.get("--profile"))

    if args['ensure']:
        parameters = args.get("<parameters>")

        template_parameters = []

        if parameters is not None:
            for parameter in parameters:
                pieces = parameter.split(":")
                k = pieces[0]
                v = ":".join(pieces[1:])
                template_parameters.append((k, v))

        manager.ensure(args.get("<name>"), args.get("<url>"), template_parameters)
    if args['cancel-update']:
        manager.cancel_update(args.get("<name>"))
    if args['status']:
        status = manager.status(args.get("<name>"))
        if status is None:
            print("No matching stack")
        else:
            print status
